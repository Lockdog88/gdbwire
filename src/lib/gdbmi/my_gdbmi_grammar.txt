GDB/MI Output Syntax

Description of GDB/MI from GDB documentation
--------------------------------------------

output              -> (out-of-band-record)* [result-record] "(gdb)" nl
result-record       -> [token] "^" result-class ("," result)* nl
out-of-band-record  -> async-record | stream-record
async-record        -> exec-async-output |
                       status-async-output |
                       notify-async-output 
exec-async-output   -> [token] "*" async-output 
status-async-output -> [token] "+" async-output 
notify-async-output -> [token] "=" async-output 

async-output        -> async-class ("," result)* nl
result-class        -> "done" | "running" | "connected" | "error" | "exit"
async-class         -> "stopped"
result              -> variable "=" value

variable            -> string
value               -> const | tuple | list
const               -> c-string
tuple               -> "{}" | "{" result ("," result)* "}"
list                -> "[]" |
                       "[" value ("," value)* "]" |
                       "[" result ("," result)* "]"

stream-record       -> console-stream-output |
                       target-stream-output |
                       log-stream-output

console-stream-output   -> "~" c-string
target-stream-output    -> "@" c-string
log-stream-output       -> "&" c-string
nl                      -> CR | CR-LF
token                   -> any sequence of digits. 

Transformations
---------------

- (out-of-band-record)* transforms to opt-oob-record-list
  opt-oob-record-list -> epsilon | oob-record-list
  oob-record-list     -> epsilon | oob-record-list oob-record
  
  oob-record-list -> oob-record-list oob-record | epsilon

- [result-record]
  opt-result-record -> result-record | epsilon

- [token]
  opt-token -> token | epsilon

- ("," result)* -> opt-result-list
  opt-result-list -> epsilon | result-list
  result-list       -> result | result-list "," result

- ("," value)* -> value-list-prime
  value-list-prime  -> value-list | epsilon
  value-list        -> value-list "," value | value

- From
    async-record        -> exec-async-output |
                           status-async-output |
                           notify-async-output 
    exec-async-output   -> [token] "*" async-output 
    status-async-output -> [token] "+" async-output 
    notify-async-output -> [token] "=" async-output 
 To
    async-record        -> opt-token async-output-kind async-output
    async-output-kind   -> "*" | "+" | "="

- From
    stream-record       -> console-stream-output |
                           target-stream-output |
                           log-stream-output

    console-stream-output   -> "~" c-string
    target-stream-output    -> "@" c-string
    log-stream-output       -> "&" c-string

  To 
    stream-record       -> stream-record-kind c-string
    stream-record-kind  -> "~" | "@" | "&"

LR(1) Grammar
-------------

output              -> oob-record-list opt-result-record "(gdb)" nl
oob-record-list     -> oob-record-list oob-record | epsilon
opt-result-record   -> result-record | epsilon
result-record       -> opt-token "^" result-class
result-record       -> opt-token "^" result-class "," result-list
oob-record          -> async-record | stream-record
async-record        -> opt-token async-output-kind async-output
async-output-kind   -> "*" | "+" | "="
async-output        -> async-class result-list nl
result-class        -> "done" | "running" | "connected" | "error" | "exit"
async-class         -> "stopped"
result-list         -> result | result-list "," result
result              -> variable "=" value
variable            -> string
value-list-prime    -> value-list | epsilon
value-list          -> value-list "," value | "," value
value               -> c-string | tuple | list
tuple               -> "{}" | "{" result-list "}"
list                -> "[]" |
                       "[" value value-list-prime "]" |
                       "[" result-list "]"
stream-record       -> stream-record-kind c-string
stream-record-kind  -> "~" | "@" | "&"
nl                  -> CR | CR LF
opt_token           -> token | epsilon
token               -> [0-9]+
